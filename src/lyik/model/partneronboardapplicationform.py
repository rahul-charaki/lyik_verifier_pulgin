# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-07-15T18:56:48+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import ConfigDict, EmailStr, Field, constr
from pydantic_v2 import BaseModel


class BANKACCOUNTDETAILS(str, Enum):
    UPLOAD_SCANNED_CHEQUE_LEAF = 'UPLOAD_SCANNED_CHEQUE_LEAF'
    UPLOAD_IMAGE_OF_PASSBOOK = 'UPLOAD_IMAGE_OF_PASSBOOK'


class CAPTUREIMAGE(str, Enum):
    UP_CL_IMG = 'UP_CL_IMG'
    CAPTURE_IMG = 'CAPTURE_IMG'


class PARTNERTYPE(str, Enum):
    COLLECTION_CENTER = 'COLLECTION_CENTER'
    DIRECT_CLIENT = 'DIRECT_CLIENT'
    FPSC = 'FPSC'
    PHLEBOTOMY = 'PHLEBOTOMY'
    SIS = 'SIS'
    COFO = 'COFO'


class PARTNERTYPELIST(str, Enum):
    PROPRIETORSHIP = 'PROPRIETORSHIP'
    PARTNERSHIP = 'PARTNERSHIP'
    PRIVATE_LIMITED = 'PRIVATE_LIMITED'
    PUBLIC_LIMITED = 'PUBLIC_LIMITED'
    LLP = 'LLP'
    TRUST = 'TRUST'
    HUF = 'HUF'


class PAYMENTTYPE(str, Enum):
    PREPAID = 'PREPAID'
    CREDIT = 'CREDIT'
    CASH = 'CASH'


class YESNO(str, Enum):
    YES = 'YES'
    NO = 'NO'


class RootAdditionalInfoAdditionalInfoCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    existing_partner: Optional[YESNO] = Field(
        None,
        description='Select Option',
        title='Are you an existing franchise holder of Agilus Diagnostics Centre?',
    )
    partner_code: Optional[str] = Field(
        None,
        description='Partner Code',
        title="If yes, please provide your partner code otherwise enter 'N/A'",
    )
    existing_family_member: Optional[YESNO] = Field(
        None,
        description='Select Option',
        title='Do any of your family members / relative own an existing Agilus Diagnostics centre?',
    )
    existing_family_member_code: Optional[str] = Field(
        None,
        description='Family Member Partner Code',
        title="If yes, please provide the partner code of the family member otherwise enter 'N/A'",
    )
    existing_pranchise_holder: Optional[YESNO] = Field(
        None,
        description='Select Option',
        title='Do you currently hold a franchisee of any other diagnostic lab?',
    )
    existing_lab_name: Optional[str] = Field(
        None,
        description='Existing Lab Name',
        title="If yes, please provide the name of the existing lab otherwise enter 'N/A'",
    )


class RootCenterInfoPartnerAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootCenterInfoPartnerCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    partner_type: Optional[PARTNERTYPE] = Field(
        None, description='Select Option', title='Partner Type'
    )
    payment_type: Optional[PAYMENTTYPE] = Field(
        None, description='Select Option', title='Payment Type'
    )
    store_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Max 30 characters.', title='Centre / Store Name'
    )
    opening_time: Optional[float] = Field(
        None, description='Enter Opening Time', title='Opening Time'
    )
    closing_time: Optional[float] = Field(
        None, description='Enter Closing Time', title='Closing Time'
    )
    monthly_sales_commitment: Optional[float] = Field(
        None,
        description='Enter Minimum Monthly Sales Commitment (INR)',
        title='Minimum Monthly Sales Commitment (INR)',
    )
    address_proof: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Acceptable: Electricity Bill, Water Bill, Rent Agreement. Affidavit allowed for Prepaid (CC/FPSC/Phlebotomy)',
        title='Upload Address Proof (PDF)',
    )
    center_image: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload Centre Image', title='Upload Centre Image'
    )
    latitude: Optional[float] = Field(
        None, description='Enter Latitude', title='Latitude'
    )
    longitude: Optional[float] = Field(
        None, description='Enter Longitude', title='Longitude'
    )
    washroom_available: Optional[YESNO] = Field(
        None, description='Select Option', title='Washroom Available?'
    )
    gst_applicable: Optional[YESNO] = Field(
        None, description='Select Option', title='GST Applicable?'
    )
    gst_number: Optional[str] = Field(
        None, description='Enter GST Number', title='GST Number'
    )
    gst_certificate: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Enter Upload GST Certificate (PDF)',
        title='Upload GST Certificate (PDF)',
    )


class RootProPersonalInfoAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoBankDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    select_document_to_upload: Optional[BANKACCOUNTDETAILS] = Field(
        None, description='Select Option', title='Select Document to Upload'
    )
    scanned_cheque_leaf: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a scanned copy of the cheque leaf',
        title='Upload Scanned Cheque Leaf',
    )
    image_of_passbook: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload an image of the passbook',
        title='Upload Image of Passbook',
    )


class RootProPersonalInfoCaptureBankDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    select_document_to_upload: Optional[BANKACCOUNTDETAILS] = Field(
        None, description='Select Option', title='Select Document to Upload'
    )
    scanned_cheque_leaf: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a scanned copy of the cheque leaf',
        title='Upload Scanned Cheque Leaf',
    )
    image_of_passbook: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload an image of the passbook',
        title='Upload Image of Passbook',
    )


class RootProPersonalInfoEmailVerifier(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[EmailStr] = Field(None, title='Email ID')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoEmailVerifierHuf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[EmailStr] = Field(None, title='Email ID')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoEmailVerifierTrust(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[EmailStr] = Field(None, title='Email ID')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoHufAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoHufBankDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    select_document_to_upload: Optional[BANKACCOUNTDETAILS] = Field(
        None, description='Select Option', title='Select Document to Upload'
    )
    scanned_cheque_leaf: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a scanned copy of the cheque leaf',
        title='Upload Scanned Cheque Leaf',
    )
    image_of_passbook: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload an image of the passbook',
        title='Upload Image of Passbook',
    )


class RootProPersonalInfoHufDetailsCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    upload_huf_deed: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload the HUF deed document for verification',
        title='Upload HUF Deed',
    )
    huf_pan: Optional[str] = Field(
        None, description='Permanent Account Number (PAN) of the HUF', title='HUF PAN'
    )


class RootProPersonalInfoHufPermanentAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoHufPersonalInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    first_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your First Name', title='First Name'
    )
    last_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your Last Name', title='Last Name'
    )
    father_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None,
        description="Enter Your Father's Name/Spouse Name",
        title="Father's Name/Spouse Name",
    )
    pan_no: Optional[constr(pattern=r'[A-Z]{5}[0-9]{4}[A-Z]')] = Field(
        None, description='ABCDE1234A', title='PAN Number'
    )
    aadhar_no: Optional[constr(pattern=r'^(?:\d{12}|\d{4}\s\d{4}\s\d{4})$')] = Field(
        None, description='12XX XXXX XX34', title='Aadhar Number'
    )


class RootProPersonalInfoLlpCompanyAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoLlpCompanyBankDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    select_document_to_upload: Optional[BANKACCOUNTDETAILS] = Field(
        None, description='Select Option', title='Select Document to Upload'
    )
    scanned_cheque_leaf: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a scanned copy of the cheque leaf',
        title='Upload Scanned Cheque Leaf',
    )
    image_of_passbook: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload an image of the passbook',
        title='Upload Image of Passbook',
    )


class RootProPersonalInfoLlpCompanyDetailsCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    cin_number: Optional[str] = Field(
        None,
        description='Corporate Identification Number (CIN) of the company',
        title='CIN Number',
    )
    company_pan: Optional[str] = Field(
        None,
        description='Permanent Account Number (PAN) of the company',
        title='Company PAN',
    )
    board_resolution: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload Digitally signed Board Resolution document in favour of Authorized Signatory.',
        title='Upload Board Resolution Document',
    )


class RootProPersonalInfoLlpCompanyPermanentAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoLlpCompanyPersonalInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    first_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your First Name', title='First Name'
    )
    last_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your Last Name', title='Last Name'
    )
    father_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None,
        description="Enter Your Father's Name/Spouse Name",
        title="Father's Name/Spouse Name",
    )
    pan_no: Optional[constr(pattern=r'[A-Z]{5}[0-9]{4}[A-Z]')] = Field(
        None, description='ABCDE1234A', title='PAN Number'
    )
    aadhar_no: Optional[constr(pattern=r'^(?:\d{12}|\d{4}\s\d{4}\s\d{4})$')] = Field(
        None, description='12XX XXXX XX34', title='Aadhar Number'
    )


class RootProPersonalInfoLlpEmailVerifierCompany(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[EmailStr] = Field(None, title='Email ID')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoLlpMobileVerifierCompany(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[str] = Field(None, title='Mobile Number')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoMobileVerifier(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[str] = Field(None, title='Mobile Number')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoMobileVerifierHuf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[str] = Field(None, title='Mobile Number')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoMobileVerifierTrust(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[str] = Field(None, title='Mobile Number')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoPartnersPartnershipEmailVerifierPartnership(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[EmailStr] = Field(None, title='Email ID')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoPartnersPartnershipMobileVerifierPartnership(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[str] = Field(None, title='Mobile Number')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoPartnersPartnershipPartnershipAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoPartnersPartnershipPartnershipPermanentAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoPartnersPartnershipPartnershipPersonalInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    first_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your First Name', title='First Name'
    )
    last_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your Last Name', title='Last Name'
    )
    father_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None,
        description="Enter Your Father's Name/Spouse Name",
        title="Father's Name/Spouse Name",
    )
    pan_no: Optional[constr(pattern=r'[A-Z]{5}[0-9]{4}[A-Z]')] = Field(
        None, description='ABCDE1234A', title='PAN Number'
    )
    aadhar_no: Optional[constr(pattern=r'^(?:\d{12}|\d{4}\s\d{4}\s\d{4})$')] = Field(
        None, description='12XX XXXX XX34', title='Aadhar Number'
    )


class RootProPersonalInfoPartnershipCardInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    number_of_partners: Optional[int] = Field(
        None, description='Enter Number of Partners', title='Number of Partners'
    )
    firm_pan: Optional[str] = Field(
        None,
        description='Permanent Account Number (PAN) of the partnership firm',
        title='Firm PAN',
    )
    upload_partnership_deed: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload the partnership deed document for verification',
        title='Upload Partnership Deed',
    )
    upload_authorization_Certificate: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload Authorisation Certificate for Authorised Signatory signed by all partners',
        title='Upload Authorization Certificate',
    )


class RootProPersonalInfoPermanentAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoPrivateCompanyAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoPrivateCompanyBankDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    select_document_to_upload: Optional[BANKACCOUNTDETAILS] = Field(
        None, description='Select Option', title='Select Document to Upload'
    )
    scanned_cheque_leaf: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a scanned copy of the cheque leaf',
        title='Upload Scanned Cheque Leaf',
    )
    image_of_passbook: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload an image of the passbook',
        title='Upload Image of Passbook',
    )


class RootProPersonalInfoPrivateCompanyDetailsCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    cin_number: Optional[str] = Field(
        None,
        description='Corporate Identification Number (CIN) of the company',
        title='CIN Number',
    )
    company_pan: Optional[str] = Field(
        None,
        description='Permanent Account Number (PAN) of the company',
        title='Company PAN',
    )
    board_resolution: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload Digitally signed Board Resolution document in favour of Authorized Signatory.',
        title='Upload Board Resolution Document',
    )


class RootProPersonalInfoPrivateCompanyPermanentAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoPrivateCompanyPersonalInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    first_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your First Name', title='First Name'
    )
    last_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your Last Name', title='Last Name'
    )
    father_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None,
        description="Enter Your Father's Name/Spouse Name",
        title="Father's Name/Spouse Name",
    )
    pan_no: Optional[constr(pattern=r'[A-Z]{5}[0-9]{4}[A-Z]')] = Field(
        None, description='ABCDE1234A', title='PAN Number'
    )
    aadhar_no: Optional[constr(pattern=r'^(?:\d{12}|\d{4}\s\d{4}\s\d{4})$')] = Field(
        None, description='12XX XXXX XX34', title='Aadhar Number'
    )


class RootProPersonalInfoPrivateEmailVerifierCompany(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[EmailStr] = Field(None, title='Email ID')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoPrivateMobileVerifierCompany(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[str] = Field(None, title='Mobile Number')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoProprietorPersonalInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    first_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your First Name', title='First Name'
    )
    last_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your Last Name', title='Last Name'
    )
    father_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None,
        description="Enter Your Father's Name/Spouse Name",
        title="Father's Name/Spouse Name",
    )
    pan_no: Optional[constr(pattern=r'[A-Z]{5}[0-9]{4}[A-Z]')] = Field(
        None, description='ABCDE1234A', title='PAN Number'
    )
    aadhar_no: Optional[constr(pattern=r'^(?:\d{12}|\d{4}\s\d{4}\s\d{4})$')] = Field(
        None, description='12XX XXXX XX34', title='Aadhar Number'
    )


class RootProPersonalInfoPublicCompanyAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoPublicCompanyBankDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    select_document_to_upload: Optional[BANKACCOUNTDETAILS] = Field(
        None, description='Select Option', title='Select Document to Upload'
    )
    scanned_cheque_leaf: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a scanned copy of the cheque leaf',
        title='Upload Scanned Cheque Leaf',
    )
    image_of_passbook: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload an image of the passbook',
        title='Upload Image of Passbook',
    )


class RootProPersonalInfoPublicCompanyDetailsCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    cin_number: Optional[str] = Field(
        None,
        description='Corporate Identification Number (CIN) of the company',
        title='CIN Number',
    )
    company_pan: Optional[str] = Field(
        None,
        description='Permanent Account Number (PAN) of the company',
        title='Company PAN',
    )
    board_resolution: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload Digitally signed Board Resolution document in favour of Authorized Signatory.',
        title='Upload Board Resolution Document',
    )


class RootProPersonalInfoPublicCompanyPermanentAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoPublicCompanyPersonalInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    first_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your First Name', title='First Name'
    )
    last_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your Last Name', title='Last Name'
    )
    father_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None,
        description="Enter Your Father's Name/Spouse Name",
        title="Father's Name/Spouse Name",
    )
    pan_no: Optional[constr(pattern=r'[A-Z]{5}[0-9]{4}[A-Z]')] = Field(
        None, description='ABCDE1234A', title='PAN Number'
    )
    aadhar_no: Optional[constr(pattern=r'^(?:\d{12}|\d{4}\s\d{4}\s\d{4})$')] = Field(
        None, description='12XX XXXX XX34', title='Aadhar Number'
    )


class RootProPersonalInfoPublicEmailVerifierCompany(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[EmailStr] = Field(None, title='Email ID')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoPublicMobileVerifierCompany(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contact_id: Optional[str] = Field(None, title='Mobile Number')
    otp: Optional[str] = Field(None, title='OTP')
    transaction_id: Optional[str] = Field(None, title='Transaction ID')


class RootProPersonalInfoTrustAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoTrustBankDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    select_document_to_upload: Optional[BANKACCOUNTDETAILS] = Field(
        None, description='Select Option', title='Select Document to Upload'
    )
    scanned_cheque_leaf: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a scanned copy of the cheque leaf',
        title='Upload Scanned Cheque Leaf',
    )
    image_of_passbook: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload an image of the passbook',
        title='Upload Image of Passbook',
    )


class RootProPersonalInfoTrustDetailsCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    upload_trust_deed: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload the trust deed document for verification',
        title='Upload Trust Deed',
    )
    authorization_certificate: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload Authorisation Certificate / Board resolution for Authorised Signatory signed by the trustees',
        title='Upload Authorization Certificate',
    )
    trust_pan: Optional[str] = Field(
        None,
        description='Permanent Account Number (PAN) of the trust',
        title='Trust PAN',
    )


class RootProPersonalInfoTrustPermanentAddressProof(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 1'
    )
    address_line_2: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 2'
    )
    address_line_3: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Address Line 3'
    )
    landmark: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Select Option', title='Landmark / Nearby Place'
    )
    pincode: Optional[str] = Field(None, description='Enter Pin Code', title='Pin Code')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    region: Optional[str] = Field(None, description='Enter Region', title='Region')


class RootProPersonalInfoTrustPersonalInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    first_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your First Name', title='First Name'
    )
    last_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None, description='Enter Your Last Name', title='Last Name'
    )
    father_name: Optional[constr(pattern=r'^[A-Za-z0-9\s]{1,30}$')] = Field(
        None,
        description="Enter Your Father's Name/Spouse Name",
        title="Father's Name/Spouse Name",
    )
    pan_no: Optional[constr(pattern=r'[A-Z]{5}[0-9]{4}[A-Z]')] = Field(
        None, description='ABCDE1234A', title='PAN Number'
    )
    aadhar_no: Optional[constr(pattern=r'^(?:\d{12}|\d{4}\s\d{4}\s\d{4})$')] = Field(
        None, description='12XX XXXX XX34', title='Aadhar Number'
    )


class RootAdditionalInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    additional_info_card: Optional[RootAdditionalInfoAdditionalInfoCard] = Field(
        None,
        description='Capture additional information for the partner onboarding process',
        title='Additional Information',
    )


class RootCenterInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    partner_card: Optional[RootCenterInfoPartnerCard] = Field(
        None,
        description='Card for capturing partner or centre details in the onboarding process',
        title='Partner / Centre Details',
    )
    partner_address_proof: Optional[RootCenterInfoPartnerAddressProof] = Field(
        None, title='Address Proof'
    )


class RootProPersonalInfoPartnersPartnership(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    partnership_personal_info: Optional[
        RootProPersonalInfoPartnersPartnershipPartnershipPersonalInfo
    ] = Field(None, title='Partner Personal Information')
    mobile_verifier_partnership: Optional[
        RootProPersonalInfoPartnersPartnershipMobileVerifierPartnership
    ] = Field(
        None,
        description='Mobile number verification for the partnership',
        title='Mobile Verification',
    )
    email_verifier_partnership: Optional[
        RootProPersonalInfoPartnersPartnershipEmailVerifierPartnership
    ] = Field(
        None,
        description='Email verification for the partnership',
        title='Email Verification',
    )
    partnership_address_proof: Optional[
        RootProPersonalInfoPartnersPartnershipPartnershipAddressProof
    ] = Field(
        None,
        description='Capture address proof for the partnership',
        title='Partnership Address Proof',
    )
    is_current_address_partnership: Optional[YESNO] = Field(
        None,
        description='Select Option',
        title='Is Current Address Same as Permanent Address?',
    )
    partnership_permanent_address_proof: Optional[
        RootProPersonalInfoPartnersPartnershipPartnershipPermanentAddressProof
    ] = Field(
        None,
        description='Capture permanent address proof for the partnership',
        title='Partner Permanent Address Proof',
    )
    capture_image_of_partnership: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a clear image of the partnership for identification purposes',
        title='Capture Image of Partner',
    )


class FieldGrpRootProPersonalInfoPartners(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    partnership: Optional[RootProPersonalInfoPartnersPartnership] = Field(
        None, title='Info Pane Builder'
    )


class RootProPersonalInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    select_type_of_ownership: Optional[PARTNERTYPELIST] = Field(
        None, description='Select Option', title='Select Type of Ownership'
    )
    proprietor_personal_info: Optional[
        RootProPersonalInfoProprietorPersonalInfo
    ] = Field(None, title='Proprietor Personal Information')
    mobile_verifier: Optional[RootProPersonalInfoMobileVerifier] = Field(
        None,
        description='Mobile number verification for the partner',
        title='Mobile Verification',
    )
    email_verifier: Optional[RootProPersonalInfoEmailVerifier] = Field(
        None,
        description='Email verification for the partner',
        title='Email Verification',
    )
    address_proof: Optional[RootProPersonalInfoAddressProof] = Field(
        None, description='Capture address proof for the partner', title='Address Proof'
    )
    is_current_address: Optional[YESNO] = Field(
        None,
        description='Select Option',
        title='Is Current Address Same as Permanent Address?',
    )
    permanent_address_proof: Optional[RootProPersonalInfoPermanentAddressProof] = Field(
        None,
        description='Capture permanent address proof for the partner',
        title='Permanent Address Proof',
    )
    capture_bank_details: Optional[RootProPersonalInfoCaptureBankDetails] = Field(
        None, description='Capture bank details for the partner', title='Bank Details'
    )
    select_capture_image: Optional[CAPTUREIMAGE] = Field(
        None, description='Select Option', title='Select Capture Image Option'
    )
    upload_clear_image: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a clear image of the proprietor for identification purposes',
        title='Upload Clear Image',
    )
    capture_image: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Capture an image of the proprietor for identification purposes',
        title='Capture Image',
    )
    partnership_card_info: Optional[RootProPersonalInfoPartnershipCardInfo] = Field(
        None, title='Partnership Information'
    )
    bank_details: Optional[RootProPersonalInfoBankDetails] = Field(
        None,
        description='Capture bank details for the partnership firm',
        title='Bank Details',
    )
    partners: Optional[List[FieldGrpRootProPersonalInfoPartners]] = Field(
        None, title='Partners'
    )
    private_company_details_card: Optional[
        RootProPersonalInfoPrivateCompanyDetailsCard
    ] = Field(None, title='Company Details')
    private_company_bank_details: Optional[
        RootProPersonalInfoPrivateCompanyBankDetails
    ] = Field(
        None,
        description='Capture bank details for the company',
        title='Company Bank Details',
    )
    private_company_personal_info: Optional[
        RootProPersonalInfoPrivateCompanyPersonalInfo
    ] = Field(None, title='Company Authorized Signatory Information')
    private_mobile_verifier_company: Optional[
        RootProPersonalInfoPrivateMobileVerifierCompany
    ] = Field(
        None,
        description='Mobile number verification for the company',
        title='Mobile Verification',
    )
    private_email_verifier_company: Optional[
        RootProPersonalInfoPrivateEmailVerifierCompany
    ] = Field(
        None,
        description='Email verification for the company',
        title='Email Verification',
    )
    private_company_address_proof: Optional[
        RootProPersonalInfoPrivateCompanyAddressProof
    ] = Field(
        None,
        description='Capture address proof for the company',
        title='Company Authorized Signatory Address Proof',
    )
    private_is_current_address_company: Optional[YESNO] = Field(
        None,
        description='Select Option',
        title='Is Current Address Same as Permanent Address?',
    )
    private_company_permanent_address_proof: Optional[
        RootProPersonalInfoPrivateCompanyPermanentAddressProof
    ] = Field(
        None,
        description='Capture permanent address proof for the company',
        title='Company Authorized Signatory Permanent Address Proof',
    )
    private_capture_image_of_company: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a clear image of the company for identification purposes',
        title='Capture Image of Authorised Signatory',
    )
    public_company_details_card: Optional[
        RootProPersonalInfoPublicCompanyDetailsCard
    ] = Field(None, title='Company Details')
    public_company_bank_details: Optional[
        RootProPersonalInfoPublicCompanyBankDetails
    ] = Field(
        None,
        description='Capture bank details for the company',
        title='Company Bank Details',
    )
    public_company_personal_info: Optional[
        RootProPersonalInfoPublicCompanyPersonalInfo
    ] = Field(None, title='Company Authorized Signatory Information')
    public_mobile_verifier_company: Optional[
        RootProPersonalInfoPublicMobileVerifierCompany
    ] = Field(
        None,
        description='Mobile number verification for the company',
        title='Mobile Verification',
    )
    public_email_verifier_company: Optional[
        RootProPersonalInfoPublicEmailVerifierCompany
    ] = Field(
        None,
        description='Email verification for the company',
        title='Email Verification',
    )
    public_company_address_proof: Optional[
        RootProPersonalInfoPublicCompanyAddressProof
    ] = Field(
        None,
        description='Capture address proof for the company',
        title='Company Authorized Signatory Address Proof',
    )
    public_is_current_address_company: Optional[YESNO] = Field(
        None,
        description='Select Option',
        title='Is Current Address Same as Permanent Address?',
    )
    public_company_permanent_address_proof: Optional[
        RootProPersonalInfoPublicCompanyPermanentAddressProof
    ] = Field(
        None,
        description='Capture permanent address proof for the company',
        title='Company Authorized Signatory Permanent Address Proof',
    )
    public_capture_image_of_company: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a clear image of the company for identification purposes',
        title='Capture Image of Authorised Signatory',
    )
    llp_company_details_card: Optional[
        RootProPersonalInfoLlpCompanyDetailsCard
    ] = Field(None, title='Company Details')
    llp_company_bank_details: Optional[
        RootProPersonalInfoLlpCompanyBankDetails
    ] = Field(
        None,
        description='Capture bank details for the company',
        title='Company Bank Details',
    )
    llp_company_personal_info: Optional[
        RootProPersonalInfoLlpCompanyPersonalInfo
    ] = Field(None, title='Company Authorized Signatory Information')
    llp_mobile_verifier_company: Optional[
        RootProPersonalInfoLlpMobileVerifierCompany
    ] = Field(
        None,
        description='Mobile number verification for the company',
        title='Mobile Verification',
    )
    llp_email_verifier_company: Optional[
        RootProPersonalInfoLlpEmailVerifierCompany
    ] = Field(
        None,
        description='Email verification for the company',
        title='Email Verification',
    )
    llp_company_address_proof: Optional[
        RootProPersonalInfoLlpCompanyAddressProof
    ] = Field(
        None,
        description='Capture address proof for the company',
        title='Company Authorized Signatory Address Proof',
    )
    llp_is_current_address_company: Optional[YESNO] = Field(
        None,
        description='Select Option',
        title='Is Current Address Same as Permanent Address?',
    )
    llp_company_permanent_address_proof: Optional[
        RootProPersonalInfoLlpCompanyPermanentAddressProof
    ] = Field(
        None,
        description='Capture permanent address proof for the company',
        title='Company Authorized Signatory Permanent Address Proof',
    )
    llp_capture_image_of_company: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a clear image of the company for identification purposes',
        title='Capture Image of Authorised Signatory',
    )
    huf_details_card: Optional[RootProPersonalInfoHufDetailsCard] = Field(
        None, title='HUF Details'
    )
    huf_bank_details: Optional[RootProPersonalInfoHufBankDetails] = Field(
        None, description='Capture bank details for the HUF', title='HUF Bank Details'
    )
    huf_personal_info: Optional[RootProPersonalInfoHufPersonalInfo] = Field(
        None, title=' HUF Karta’s  Personal Information'
    )
    mobile_verifier_huf: Optional[RootProPersonalInfoMobileVerifierHuf] = Field(
        None,
        description='Mobile number verification for the HUF',
        title='Mobile Verification',
    )
    email_verifier_huf: Optional[RootProPersonalInfoEmailVerifierHuf] = Field(
        None, description='Email verification for the HUF', title='Email Verification'
    )
    huf_address_proof: Optional[RootProPersonalInfoHufAddressProof] = Field(
        None,
        description='Capture address proof for the HUF',
        title=' HUF Karta’s  Address Proof',
    )
    is_current_address_huf: Optional[YESNO] = Field(
        None,
        description='Select Option',
        title='Is Current Address Same as Permanent Address?',
    )
    huf_permanent_address_proof: Optional[
        RootProPersonalInfoHufPermanentAddressProof
    ] = Field(
        None,
        description='Capture permanent address proof for the HUF',
        title=' HUF Karta’s  Permanent Address Proof',
    )
    capture_image_of_huf: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a clear image of the HUF for identification purposes',
        title='Capture Image of  HUF Karta’s ',
    )
    trust_details_card: Optional[RootProPersonalInfoTrustDetailsCard] = Field(
        None, title='Trust Details'
    )
    trust_bank_details: Optional[RootProPersonalInfoTrustBankDetails] = Field(
        None,
        description='Capture bank details for the trust',
        title='Trust Bank Details',
    )
    trust_personal_info: Optional[RootProPersonalInfoTrustPersonalInfo] = Field(
        None, title='Trust Personal Information'
    )
    mobile_verifier_trust: Optional[RootProPersonalInfoMobileVerifierTrust] = Field(
        None,
        description='Mobile number verification for the trust',
        title='Mobile Verification',
    )
    email_verifier_trust: Optional[RootProPersonalInfoEmailVerifierTrust] = Field(
        None, description='Email verification for the trust', title='Email Verification'
    )
    trust_address_proof: Optional[RootProPersonalInfoTrustAddressProof] = Field(
        None,
        description='Capture address proof for the trust',
        title='Trust Address Proof',
    )
    is_current_address_trust: Optional[YESNO] = Field(
        None,
        description='Select Option',
        title='Is Current Address Same as Permanent Address?',
    )
    trust_permanent_address_proof: Optional[
        RootProPersonalInfoTrustPermanentAddressProof
    ] = Field(
        None,
        description='Capture permanent address proof for the trust',
        title='Trust Permanent Address Proof',
    )
    capture_image_of_trust: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload a clear image of the Trust for identification purposes',
        title='Capture Image of  Trust',
    )


class Partneronboardapplicationform(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    center_info: Optional[RootCenterInfo] = Field(
        None,
        description='Captures initial centre-level details before ownership and compliance info',
        title='Partner / Centre Details',
    )
    pro_personal_info: Optional[RootProPersonalInfo] = Field(
        None,
        description='Section for capturing personal details of the partner based on ownership type',
        title='Partner Personal Information',
    )
    additional_info: Optional[RootAdditionalInfo] = Field(
        None,
        description='Section for capturing additional information required for partner onboarding',
        title='Additional Information',
    )
